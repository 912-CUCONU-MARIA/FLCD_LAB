<program> = <statement>
<program> = <statement> <program>
<statement> = <dec_stmt> ;
<statement> = <simple_assign_stmt> ;
<statement> = <arr_assign_stmt> ;
<statement> = <if_stmt>
<statement> = <while_stmt>
<statement> = <out_func_call> ;
<dec_stmt> = <type> <identifier>
<dec_stmt> = <type> <simple_assign_stmt>
<dec_stmt> = <type> <arr_dec_stmt>
<type> = int
<type> = string
<simple_assign_stmt> = <identifier> = <expression>
<arr_assign_stmt> = <arr_access> = <expression>
<arr_access> = <identifier> [ <positive_number> ]
<expression> = <int_expression>
<expression> = <string_expression>
<expression> = <in_func_call>
<int_expression> = <int>
<int_expression> = <identifier>
<int_expression> = <arr_access>
<int_expression> = <int_expression> <arithmetic_operator> <int_expression>
<int_expression> = ( <int_expression> <arithmetic_operator> <int_expression> )
<positive_number> = 0
<positive_number> = <non_zero_number>
<non_zero_number> = <non_zero_digit>
<non_zero_number> = <non_zero_digit> <digit_sequence>
<digit_sequence> = <digit>
<digit_sequence> = <digit> <digit_sequence>
<arithmetic_operator> = +
<arithmetic_operator> = -
<arithmetic_operator> = %
<arithmetic_operator> = *
<arithmetic_operator> = /
<string_expression> = <string>
<string_expression> = <identifier>
<string_expression> = <arr_access>
<arr_dec_stmt> = <simple_arr_stmt>
<arr_dec_stmt> = { <identifier_list> }
<arr_dec_stmt> = { <array_list> }
<arr_dec_stmt> = { <constant_list> }
<simple_arr_stmt> = <identifier> [ <non_zero_number> ]
<identifier_list> = <identifier>
<identifier_list> = <identifier> , <identifier_list>
<array_list> = <arr_access>
<array_list> = <arr_access> , <array_list>
<constant_list> = <constant>
<constant_list> = <constant> , <constant_list>
<constant> = <int> | <string>
<if_stmt> = if ( <condition> ) { <statement> } else { <statement> }
<condition> = <expression> <relational_operator> <expression>
<relational_operator> = <
<relational_operator> = <=
<relational_operator> = ==
<relational_operator> = !=
<while_stmt> = while ( <condition> ) { <statement> }
<in_func_call> = readInt()
<in_func_call> = readString()
<out_func_call> = print ( <identifier> )
<out_func_call> = print ( <constant> )
<out_func_call> = print ( <arr_access> )
<int> = 0 | ["-"] non_zero_digit {digit}
<int> = 0
<int> = <int-with-sign>
<int-with-sign> = <positive_int>
<int-with-sign> = <negative_int>
<negative-int> = "-" <non-zero-digit> <digit-sequence>
<positive-int> = <non-zero-digit> <digit-sequence>
<digit-sequence> = <digit>
<digit-sequence> = <digit> <digit-sequence>
<identifier> = <letter>
<identifier> = _
<identifier> = <letter> <identifier-rest>
<identifier> = _ <identifier-rest>
<identifier-rest> = <letter>
<identifier-rest> = <digit>
<identifier-rest> = _
<identifier-rest> = <letter> <identifier-rest>
<identifier-rest> = <digit> <identifier-rest>
<identifier-rest> = _ <identifier-rest>
<string> = " "
<string> = " <char_sequence> "
<char_sequence> = <char>
<char_sequence> = <char> <char_sequence>
<char> = <letter>
<char> = <digit>
<char> = _
<char> = .
<letter> = A
<letter> = B
<letter> = C
<letter> = D
<letter> = E
<letter> = F
<letter> = G
<letter> = H
<letter> = I
<letter> = J
<letter> = K
<letter> = L
<letter> = M
<letter> = N
<letter> = O
<letter> = P
<letter> = Q
<letter> = R
<letter> = S
<letter> = T
<letter> = U
<letter> = V
<letter> = W
<letter> = X
<letter> = Y
<letter> = Z
<letter> = a
<letter> = b
<letter> = c
<letter> = d
<letter> = e
<letter> = f
<letter> = g
<letter> = h
<letter> = i
<letter> = j
<letter> = k
<letter> = l
<letter> = m
<letter> = n
<letter> = o
<letter> = p
<letter> = q
<letter> = r
<letter> = s
<letter> = t
<letter> = u
<letter> = v
<letter> = w
<letter> = x
<letter> = y
<letter> = z
<digit> = 0
<digit> = <non_zero_digit>
<non_zero_digit> = 1
<non_zero_digit> = 2
<non_zero_digit> = 3
<non_zero_digit> = 4
<non_zero_digit> = 5
<non_zero_digit> = 6
<non_zero_digit> = 7
<non_zero_digit> = 8
<non_zero_digit> = 9